# vim:ft=ansible

# Load global vars

- include_vars: ../../../misc/global-vars.yml

# Common tasks for all nodes

- name: check to see if neutron was already installed
  stat: path=/tmp/.ansible-neutron-installed
  register: neutron_touch

- name: install relevant packages common for all nodes
  yum: name={{ item }} state=present
  with_items:
    - openstack-neutron
    - openstack-neutron-ml2
  when: neutron_touch.stat.exists == false
  sudo: true

- name: install relevant packages relevant for network and compute node
  yum: name={{ item }} state=present
  with_items:
    - openstack-neutron-openvswitch
  when: neutron_touch.stat.exists == false and (on_network is defined or on_compute is defined)
  sudo: true

- name: configure symbolic link plugin.ini -> plugins/ml2/ml2_conf.ini
  file: src=/etc/neutron/plugins/ml2/ml2_conf.ini dest=/etc/neutron/plugin.ini owner=root group=root state=link
  when: neutron_touch.stat.exists == false
  sudo: true

- name: clear nova keystone_authtoken settings in neutron.conf
  shell: crudini --del /etc/neutron/neutron.conf keystone_authtoken
  when: neutron_touch.stat.exists == false
  sudo: true

- name: configure network components common for all nodes
  shell: crudini --set /etc/neutron/neutron.conf {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'DEFAULT', param: 'rpc_backend', value: 'rabbit' }
    - { section: 'oslo_messaging_rabbit', param: 'rabbit_host', value: 'controller' }
    - { section: 'oslo_messaging_rabbit', param: 'rabbit_userid', value: 'openstack' }
    - { section: 'oslo_messaging_rabbit', param: 'rabbit_password', value: '{{ RABBIT_PASS }}' }
    - { section: 'DEFAULT', param: 'auth_strategy', value: 'keystone' }
    - { section: 'keystone_authtoken', param: 'auth_uri', value: 'http://controller:5000' }
    - { section: 'keystone_authtoken', param: 'auth_url', value: 'http://controller:35357' }
    - { section: 'keystone_authtoken', param: 'auth_plugin', value: 'password' }
    - { section: 'keystone_authtoken', param: 'project_domain_id', value: 'default' }
    - { section: 'keystone_authtoken', param: 'user_domain_id', value: 'default' }
    - { section: 'keystone_authtoken', param: 'project_name', value: 'service' }
    - { section: 'keystone_authtoken', param: 'username', value: 'nova' }
    - { section: 'keystone_authtoken', param: 'password', value: '{{ NEUTRON_PASS }}' }
    - { section: 'DEFAULT', param: 'core_plugin', value: 'ml2' }
    - { section: 'DEFAULT', param: 'service_plugins', value: 'router' }
    - { section: 'DEFAULT', param: 'allow_overlapping_ips', value: 'True' }
    - { section: 'DEFAULT', param: 'verbose', value: 'True' }
  when: neutron_touch.stat.exists == false
  sudo: true

- name: configure ml2 plugin common for all nodes
  shell: crudini --set /etc/neutron/plugins/ml2/ml2_conf.ini {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'ml2', param: 'type_drivers', value: 'flat,vlan,gre,vxlan' }
    - { section: 'ml2', param: 'tenant_network_types', value: 'gre' }
    - { section: 'ml2', param: 'mechanism_drivers', value: 'openvswitch,l2population' }
    - { section: 'ml2_type_gre', param: 'tunnel_id_ranges', value: '1:1000' }
    - { section: 'ml2_type_flat', param: 'flat_networks', value: 'external' }
    - { section: 'securitygroup', param: 'enable_security_group', value: 'True' }
    - { section: 'securitygroup', param: 'enable_ipset', value: 'True' }
    - { section: 'securitygroup', param: 'firewall_driver', value: 'neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver' }
  when: neutron_touch.stat.exists == false
  sudo: true

# Install and configure controller node

- name: install relevant packages
  yum: name=python-neutronclient state=present
  when: neutron_touch.stat.exists == false and on_controller is defined
  sudo: true

- name: create neutron database
  mysql_db: name=neutron state=present login_user=root login_password={{ ROOT_DBPASS }}
  when: neutron_touch.stat.exists == false and on_controller is defined
  sudo: true

- name: grant access to the neutron database
  mysql_user: name=neutron host={{ item }} password={{ ROOT_DBPASS }} \
        priv=neutron.*:ALL state=present login_user=root login_password={{ ROOT_DBPASS }}
  with_items:
    - localhost
    - '%'
  when: neutron_touch.stat.exists == false and on_controller is defined
  sudo: true

- name: create the neutron user
  shell: openstack user create --password {{ NEUTRON_PASS }} neutron
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
  when: neutron_touch.stat.exists == false and on_controller is defined

- name: add admin role to the neutron user and service project
  shell: openstack role add --project service --user neutron admin
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
  when: neutron_touch.stat.exists == false and on_controller is defined

- name: create the neutron service entity
  shell: openstack service create --name neutron --description "OpenStack Networking" network
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
  when: neutron_touch.stat.exists == false and on_controller is defined

- name: create the neutron service API endpoint
  shell: openstack endpoint create --publicurl "{{ PUBLIC_NEUTRON_URL }}" --internalurl \
          "{{ INTERNAL_NEUTRON_URL }}" --adminurl "{{ ADMIN_NEUTRON_URL }}" --region RegionOne network
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
  when: neutron_touch.stat.exists == false and on_controller is defined

- name: configure network components on controller node
  shell: crudini --set /etc/neutron/neutron.conf {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'database', param: 'connection', value: 'mysql://neutron:{{ NEUTRON_DBPASS }}@controller/neutron' }
    - { section: 'DEFAULT', param: 'allow_overlapping_ips', value: 'True' }
    - { section: 'DEFAULT', param: 'notify_nova_on_port_status_changes', value: 'True' }
    - { section: 'DEFAULT', param: 'notify_nova_on_port_data_changes', value: 'True' }
    - { section: 'DEFAULT', param: 'nova_url', value: 'http://controller:8774/v2' }
    - { section: 'DEFAULT', param: 'router_distributed', value: 'True' }
    - { section: 'nova', param: 'auth_url', value: 'http://controller:35357' }
    - { section: 'nova', param: 'auth_plugin', value: 'password' }
    - { section: 'nova', param: 'project_domain_id', value: 'default' }
    - { section: 'nova', param: 'user_domain_id', value: 'default' }
    - { section: 'nova', param: 'region_name', value: 'RegionOne' }
    - { section: 'nova', param: 'project_name', value: 'service' }
    - { section: 'nova', param: 'username', value: 'nova' }
    - { section: 'nova', param: 'password', value: '{{ NOVA_PASS }}' }
  when: neutron_touch.stat.exists == false and on_controller is defined
  sudo: true

- name: configure compute to use networking
  shell: crudini --set /etc/nova/nova.conf {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'DEFAULT', param: 'network_api_class', value: 'nova.network.neutronv2.api.API' }
    - { section: 'DEFAULT', param: 'security_group_api', value: 'neutron' }
    - { section: 'DEFAULT', param: 'linuxnet_interface_driver', value: 'nova.network.linux_net.LinuxOVSInterfaceDriver' }
    - { section: 'DEFAULT', param: 'firewall_driver', value: 'nova.virt.firewall.NoopFirewallDriver' }
    - { section: 'neutron', param: 'url', value: 'http://controller:9696' }
    - { section: 'neutron', param: 'auth_strategy', value: 'keystone' }
    - { section: 'neutron', param: 'admin_auth_url', value: 'http://controller:35357/v2.0' }
    - { section: 'neutron', param: 'admin_tenant_name', value: 'service' }
    - { section: 'neutron', param: 'admin_username', value: 'neutron' }
    - { section: 'neutron', param: 'admin_password', value: '{{ NEUTRON_PASS }}' }
  when: neutron_touch.stat.exists == false and (on_controller is defined or on_compute is defined)
  sudo: true

- name: populate the database
  shell: su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
  when: neutron_touch.stat.exists == false and on_controller is defined
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
  sudo: true
  ignore_errors: true

- name: restart openstack compute services
  service: name={{ item }} enabled=yes state=restarted
  with_items:
    - openstack-nova-api
    - openstack-nova-scheduler
    - openstack-nova-conductor
  when: neutron_touch.stat.exists == false and on_controller is defined
  sudo: true

- name: enable and start openstack networking services
  service: name=neutron-server enabled=yes state=started
  when: neutron_touch.stat.exists == false and on_controller is defined
  sudo: true

- name: mark neutron service as installed
  shell: touch /tmp/.ansible-neutron-installed
  when: controller_mgmt_ip != network_mgmt_ip and on_controller is defined
  sudo: true

# Install and configure network node

- name: copy ifcg-br-ex
  template: src=ifcfg-br-ex-network dest=/etc/sysconfig/network-scripts/ifcfg-br-ex owner=root group=root mode=0600
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: configure kernel networking parameters
  lineinfile: dest=/etc/sysctl.conf regexp={{item.regexp}} line={{item.line}}
  with_items:
    - { regexp: '^net\.ipv4\.ip_forward', line: 'net.ipv4.ip_forward=1' }
    - { regexp: '^net\.ipv4\.conf\.all\.rp_filter', line: 'net.ipv4.conf.all.rp_filter=0' }
    - { regexp: '^net\.ipv4\.conf\.default\.rp_filter', line: 'net.ipv4.conf.default.rp_filter=0' }
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: load kernel networking parameters
  shell: sysctl -p
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: configure ml2 plugin network node specifics
  shell: crudini --set /etc/neutron/plugins/ml2/ml2_conf.ini {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'ml2_type_flat', param: 'flat_networks', value: 'external' }
    - { section: 'ovs', param: 'local_ip', value: '{{ network_tun_ip }}' }
    - { section: 'ovs', param: 'bridge_mappings', value: 'external:br-ex' }
    - { section: 'agent', param: 'tunnel_types', value: 'gre' }
    - { section: 'agent', param: 'l2_population', value: 'True' }
    - { section: 'agent', param: 'enable_distributed_routing', value: 'True' }
    - { section: 'agent', param: 'arp_responder', value: 'True' }
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: configure l3 agent
  shell: crudini --set /etc/neutron/l3_agent.ini {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'DEFAULT', param: 'interface_driver', value: 'neutron.agent.linux.interface.OVSInterfaceDriver' }
    - { section: 'DEFAULT', param: 'external_network_bridge', value: '' }
    - { section: 'DEFAULT', param: 'use_namespaces', value: 'True' }
    - { section: 'DEFAULT', param: 'agent_mode', value: 'dvr_snat' }
    - { section: 'DEFAULT', param: 'router_delete_namespaces', value: 'True' }
    - { section: 'DEFAULT', param: 'verbose', value: 'True' }
  when: neutron_touch.stat.exists == false and (on_network is defined or on_compute is defined)
  sudo: true

- name: configure dhcp agent
  shell: crudini --set /etc/neutron/dhcp_agent.ini {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'DEFAULT', param: 'interface_driver', value: 'neutron.agent.linux.interface.OVSInterfaceDriver' }
    - { section: 'DEFAULT', param: 'dhcp_driver', value: 'neutron.agent.linux.dhcp.Dnsmasq' }
    - { section: 'DEFAULT', param: 'dhcp_delete_namespaces', value: 'True' }
    - { section: 'DEFAULT', param: 'use_namespaces', value: 'True' }
    - { section: 'DEFAULT', param: 'verbose', value: 'True' }
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: configure the metadata agent
  shell: crudini --set /etc/neutron/metadata_agent.ini {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'DEFAULT', param: 'nova_uri', value: 'http://controller:5000' }
    - { section: 'DEFAULT', param: 'auth_url', value: 'http://controller:35357' }
    - { section: 'DEFAULT', param: 'auth_region', value: 'RegionOne' }
    - { section: 'DEFAULT', param: 'auth_plugin', value: 'password' }
    - { section: 'DEFAULT', param: 'project_domain_id', value: 'default' }
    - { section: 'DEFAULT', param: 'user_domain_id', value: 'default' }
    - { section: 'DEFAULT', param: 'project_name', value: 'service' }
    - { section: 'DEFAULT', param: 'username', value: 'nova' }
    - { section: 'DEFAULT', param: 'password', value: '{{ NEUTRON_PASS }}' }
    - { section: 'DEFAULT', param: 'nova_metadata_ip', value: 'controller' }
    - { section: 'DEFAULT', param: 'metadata_proxy_shared_secret', value: '{{ METADATA_SECRET }}' }
    - { section: 'DEFAULT', param: 'verbose', value: 'True' }
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: delegate enabling the metadata proxy and setting the secret on controller
  shell: crudini --set /etc/nova/nova.conf {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'neutron', param: 'service_metadata_proxy', value: 'True' }
    - { section: 'neutron', param: 'metadata_proxy_shared_secret', value: '{{ METADATA_SECRET }}' }
  when: on_network is defined
  sudo: true
  delegate_to: controller

- name: delegate restart of openstack-nova-api on controller
  service: name=openstack-nova-api enabled=yes state=restarted
  when: on_network is defined
  sudo: true
  delegate_to: controller

- name: enable and start the OVS service
  service: name=openvswitch enabled=yes state=started
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: add the external bridge
  shell: ovs-vsctl add-br br-ex
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: set ext phy ifce to promiscuous mode
  shell: ip link set {{ ext_ifce }} promisc on
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: handle OVS agent initialization script bug
  shell: sed -iorig 's,plugins/openvswitch/ovs_neutron_plugin.ini,plugin.ini,g' /usr/lib/systemd/system/neutron-openvswitch-agent.service
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: start openstack networking services
  service: name={{ item }} enabled=yes state=started
  with_items:
    - neutron-openvswitch-agent
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
    - neutron-ovs-cleanup
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: true

- name: template ifcfg-br-ex
  template: src=ifcfg-br-ex-network dest=/etc/sysconfig/network-scripts/ifcfg-br-ex owner=root group=wheel mode=0644
  when: neutron_touch.stat.exists == false and on_network is defined
  sudo: True

- name: template reboot-net-node.sh
  template: src=reboot-net-node.sh dest=/root/reboot-net-node.sh owner=root group=wheel mode=0666
  when: neutron_touch.stat.exists == false and (on_network is defined or on_compute is defined)
  sudo: True

- name: copy ifcfg-ext_ifce config file
  template: src=ifcfg-ext_ifce dest=/etc/sysconfig/network-scripts/ifcfg-{{ ext_ifce }} owner=root group=root mode=0644 backup=yes
  when: neutron_touch.stat.exists == false and (on_network is defined or on_compute is defined)
  sudo: true

- name: mark neutron service as installed
  shell: touch /tmp/.ansible-neutron-installed
  when: on_network is defined
  sudo: true

# Install and configure compute node

- name: copy ifcg-br-ex
  template: src=ifcfg-br-ex-compute dest=/etc/sysconfig/network-scripts/ifcfg-br-ex owner=root group=root mode=0600
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: configure kernel networking parameters
  lineinfile: dest=/etc/sysctl.conf regexp={{item.regexp}} line={{item.line}}
  with_items:
    - { regexp: '^net\.ipv4\.ip_forward', line: 'net.ipv4.ip_forward=1' }
    - { regexp: '^net\.ipv4\.conf\.all\.rp_filter', line: 'net.ipv4.conf.all.rp_filter=0' }
    - { regexp: '^net\.ipv4\.conf\.default\.rp_filter', line: 'net.ipv4.conf.default.rp_filter=0' }
    - { regexp: '^net\.bridge\.bridge-nf-call-iptables', line: 'net.bridge.bridge-nf-call-iptables=1' }
    - { regexp: '^net\.bridge\.bridge-nf-call-ip6tables', line: 'net.bridge.bridge-nf-call-ip6tables=1' }
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: load kernel networking parameters
  shell: "{{ item }}"
  with_items:
    - modprobe bridge
    - sysctl -p
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: configure ml2 plugin compute node specifics
  shell: crudini --set /etc/neutron/plugins/ml2/ml2_conf.ini {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'ovs', param: 'local_ip', value: '{{ compute_tun_ip }}' }
    - { section: 'ovs', param: 'bridge_mappings', value: 'external:br-ex' }
    - { section: 'agent', param: 'tunnel_types', value: 'gre' }
    - { section: 'agent', param: 'l2_population', value: 'True' }
    - { section: 'agent', param: 'enable_distributed_routing', value: 'True' }
    - { section: 'agent', param: 'arp_responder', value: 'True' }
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: configure l3 agent
  shell: crudini --set /etc/neutron/l3_agent.ini DEFAULT agent_mode dvr
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: configure the metadata agent
  shell: crudini --set /etc/neutron/metadata_agent.ini {{ item.section }} {{ item.param }} "{{ item.value }}"
  with_items:
    - { section: 'DEFAULT', param: 'nova_metadata_ip', value: 'controller' }
    - { section: 'DEFAULT', param: 'metadata_proxy_shared_secret', value: '{{ METADATA_SECRET }}' }
    - { section: 'DEFAULT', param: 'verbose', value: 'True' }
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: handle OVS agent initialization script bug
  shell: sed -iorig 's,plugins/openvswitch/ovs_neutron_plugin.ini,plugin.ini,g' /usr/lib/systemd/system/neutron-openvswitch-agent.service
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: start openstack networking services
  service: name={{ item }} enabled=yes state=started
  with_items:
    - openstack-nova-compute
    - openvswitch
    - neutron-openvswitch-agent
    - neutron-l3-agent
    - neutron-metadata-agent
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: add the external bridge
  shell: ovs-vsctl add-br br-ex
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: set ext phy ifce to promiscuous mode
  shell: ip link set {{ ext_ifce }} promisc on
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

- name: mark neutron service as installed
  shell: touch /tmp/.ansible-neutron-installed
  when: on_compute is defined
  sudo: true

# Create initial networks

- name: create the external network
  shell: neutron net-create ext-net --router:external --provider:physical_network external --provider:network_type flat
  when: neutron_touch.stat.exists == false and on_compute is defined and inventory_hostname == "compute1"
  sudo: true
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
    OS_PROJECT_DOMAIN_ID: default
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_NAME: admin
    OS_TENANT_NAME: admin
    OS_USERNAME: admin
    OS_PASSWORD: "{{ ADMIN_PASS }}"
    OS_AUTH_URL: "http://controller:35357/v3"
    OS_IMAGE_API_VERSION: 2
  delegate_to: controller

- name: create a subnet on the external network
  shell: neutron subnet-create ext-net {{ ext_net }} --name ext-subnet --allocation-pool start={{ ext_aps }},end={{ ext_ape }} --disable-dhcp --gateway {{ ext_gw }} 
  when: neutron_touch.stat.exists == false and on_compute is defined and inventory_hostname == "compute1"
  sudo: true
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
    OS_PROJECT_DOMAIN_ID: default
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_NAME: admin
    OS_TENANT_NAME: admin
    OS_USERNAME: admin
    OS_PASSWORD: "{{ ADMIN_PASS }}"
    OS_AUTH_URL: "http://controller:35357/v3"
    OS_IMAGE_API_VERSION: 2
  delegate_to: controller

- name: create the tenant network 
  shell: neutron net-create demo-net
  when: neutron_touch.stat.exists == false and on_compute is defined and inventory_hostname == "compute1"
  sudo: true
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
    OS_PROJECT_DOMAIN_ID: default
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_NAME: admin
    OS_TENANT_NAME: admin
    OS_USERNAME: admin
    OS_PASSWORD: "{{ ADMIN_PASS }}"
    OS_AUTH_URL: "http://controller:35357/v3"
    OS_IMAGE_API_VERSION: 2
  delegate_to: controller

- name: create a subnet on the tenant network
  shell: neutron subnet-create demo-net 192.168.168.0/24 --name demo-subnet --gateway 192.168.168.1
  when: neutron_touch.stat.exists == false and on_compute is defined and inventory_hostname == "compute1"
  sudo: true
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
    OS_PROJECT_DOMAIN_ID: default
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_NAME: admin
    OS_TENANT_NAME: admin
    OS_USERNAME: admin
    OS_PASSWORD: "{{ ADMIN_PASS }}"
    OS_AUTH_URL: "http://controller:35357/v3"
    OS_IMAGE_API_VERSION: 2
  delegate_to: controller

- name: create the router
  shell: neutron router-create demo-router
  when: neutron_touch.stat.exists == false and on_compute is defined and inventory_hostname == "compute1"
  sudo: true
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
    OS_PROJECT_DOMAIN_ID: default
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_NAME: admin
    OS_TENANT_NAME: admin
    OS_USERNAME: admin
    OS_PASSWORD: "{{ ADMIN_PASS }}"
    OS_AUTH_URL: "http://controller:35357/v3"
    OS_IMAGE_API_VERSION: 2
  delegate_to: controller

- name: attach the router to the demo tenant subnet
  shell: neutron router-interface-add demo-router demo-subnet
  when: neutron_touch.stat.exists == false and on_compute is defined and inventory_hostname == "compute1"
  sudo: true
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
    OS_PROJECT_DOMAIN_ID: default
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_NAME: admin
    OS_TENANT_NAME: admin
    OS_USERNAME: admin
    OS_PASSWORD: "{{ ADMIN_PASS }}"
    OS_AUTH_URL: "http://controller:35357/v3"
    OS_IMAGE_API_VERSION: 2
  delegate_to: controller

- name: attach the router to the external network
  shell: neutron router-gateway-set demo-router ext-net
  when: neutron_touch.stat.exists == false and on_compute is defined and inventory_hostname == "compute1"
  sudo: true
  environment:
    OS_TOKEN: "{{ ADMIN_TOKEN }}"
    OS_URL: "{{ ADMIN_KEYSTONE_URL }}"
    OS_PROJECT_DOMAIN_ID: default
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_NAME: admin
    OS_TENANT_NAME: admin
    OS_USERNAME: admin
    OS_PASSWORD: "{{ ADMIN_PASS }}"
    OS_AUTH_URL: "http://controller:35357/v3"
    OS_IMAGE_API_VERSION: 2
  delegate_to: controller
  
- name: add external eth to br-ex in network node and restart
  shell: nohup sh /root/reboot-net-node.sh 0<&- &>/dev/null &
  when: neutron_touch.stat.exists == false and on_compute is defined and network_mgmt_ip != controller_mgmt_ip
  sudo: true
  delegate_to: network

- name: add external eth to br-ex in controller node and restart
  shell: nohup sh /root/reboot-net-node.sh 0<&- &>/dev/null &
  when: neutron_touch.stat.exists == false and on_compute is defined and network_mgmt_ip == controller_mgmt_ip and inventory_hostname == "compute1"
  sudo: true
  delegate_to: controller

- name: add external eth to br-ex in compute node and restart
  shell: nohup sh /root/reboot-net-node.sh 100 0<&- &>/dev/null &
  when: neutron_touch.stat.exists == false and on_compute is defined
  sudo: true

